<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker容器命令</title>
    <url>/2024/02/08/docker/Docker%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="Docker-容器命令"><a href="#Docker-容器命令" class="headerlink" title="Docker 容器命令"></a>Docker 容器命令</h2><h3 id="1-启动-Docker"><a href="#1-启动-Docker" class="headerlink" title="1. 启动 Docker"></a>1. 启动 Docker</h3><p>要启动一个已经存在的容器，可以使用 <strong>start</strong> 命令。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker start [容器名/containerID]</span><br></pre></td></tr></table></figure></div>

<p>Docker start 命令本质为容器文件系统创建了一个进程隔离空间。</p>
<h3 id="2-停止容器"><a href="#2-停止容器" class="headerlink" title="2. 停止容器"></a>2. 停止容器</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop [容器名/containerID]</span><br></pre></td></tr></table></figure></div>

<h3 id="3-运行容器"><a href="#3-运行容器" class="headerlink" title="3. 运行容器"></a>3. 运行容器</h3><p>要创建和运行容器使用 <strong>run</strong> 命令。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [-d] [容器名/containerID]</span><br></pre></td></tr></table></figure></div>

<p>该命令会从本地、Docker Hub 中搜索指定的镜像，并下载到本地，创建一个容器并启动该容器。</p>
<p>选项：</p>
<ul>
<li>-d：为可选项，表示以后台方式启动。</li>
</ul>
<h3 id="4-查看所有运行中的容器"><a href="#4-查看所有运行中的容器" class="headerlink" title="4. 查看所有运行中的容器"></a>4. 查看所有运行中的容器</h3><p>列出所有运行中的容器。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure></div>

<p>列出所有的容器，不管是运行的，还是停止的。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></div>

<h3 id="5-重启容器"><a href="#5-重启容器" class="headerlink" title="5. 重启容器"></a>5. 重启容器</h3><p>要重启一个运行中的容器。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker restart [容器名/containerID]</span><br></pre></td></tr></table></figure></div>

<h3 id="6-查看容器日志"><a href="#6-查看容器日志" class="headerlink" title="6. 查看容器日志"></a>6. 查看容器日志</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker log -f [容器名/containerID]</span><br></pre></td></tr></table></figure></div>

<p>选项：</p>
<ul>
<li>-f：可选，滚动刷新日志信息。</li>
</ul>
<h3 id="7-进入容器"><a href="#7-进入容器" class="headerlink" title="7. 进入容器"></a>7. 进入容器</h3><p>容器启动后，要进入容器内部。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it [容器名/containerID] /bin/[bash | sh]</span><br></pre></td></tr></table></figure></div>

<h3 id="8-查看-Docker-信息"><a href="#8-查看-Docker-信息" class="headerlink" title="8. 查看 Docker 信息"></a>8. 查看 Docker 信息</h3><p>查看 Docker 版本。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure></div>

<p>如：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[root@192 ~]# docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           24.0.2</span><br><span class="line"> API version:       1.43</span><br><span class="line"> Go version:        go1.20.4</span><br><span class="line"> Git commit:        cb74dfc</span><br><span class="line"> Built:             Thu May 25 21:55:21 2023</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          24.0.2</span><br><span class="line">  API version:      1.43 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.20.4</span><br><span class="line">  Git commit:       659604f</span><br><span class="line">  Built:            Thu May 25 21:54:24 2023</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.6.25</span><br><span class="line">  GitCommit:        d8f198a4ed8892c764191ef7b3b06d8a2eeb5c7f</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.10</span><br><span class="line">  GitCommit:        v1.1.10-0-g18a0cb0</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure></div>

<h3 id="9-查看-docker-系统的信息"><a href="#9-查看-docker-系统的信息" class="headerlink" title="9. 查看 docker 系统的信息"></a>9. 查看 docker 系统的信息</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure></div>

<p>如：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">[root@192 ~]<span class="comment"># docker info</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:    24.0.2</span><br><span class="line"> Context:    default</span><br><span class="line"> Debug Mode: <span class="literal">false</span></span><br><span class="line"> Plugins:</span><br><span class="line">  buildx: Docker Buildx (Docker Inc.)</span><br><span class="line">    Version:  v0.11.2</span><br><span class="line">    Path:     /usr/libexec/docker/cli-plugins/docker-buildx</span><br><span class="line">  compose: Docker Compose (Docker Inc.)</span><br><span class="line">    Version:  v2.21.0</span><br><span class="line">    Path:     /usr/libexec/docker/cli-plugins/docker-compose</span><br><span class="line">  scan: Docker Scan (Docker Inc.)</span><br><span class="line">    Version:  v0.23.0</span><br><span class="line">    Path:     /usr/libexec/docker/cli-plugins/docker-scan</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Containers: 19</span><br><span class="line">  Running: 16</span><br><span class="line">  Paused: 0</span><br><span class="line">  Stopped: 3</span><br><span class="line"> Images: 85</span><br><span class="line"> Server Version: 24.0.2</span><br><span class="line"> Storage Driver: overlay2</span><br><span class="line">  Backing Filesystem: xfs</span><br><span class="line">  Supports d_type: <span class="literal">true</span></span><br><span class="line">  Using metacopy: <span class="literal">false</span></span><br><span class="line">  Native Overlay Diff: <span class="literal">true</span></span><br><span class="line">  userxattr: <span class="literal">false</span></span><br><span class="line"> Logging Driver: json-file</span><br><span class="line"> Cgroup Driver: cgroupfs</span><br><span class="line"> Cgroup Version: 1</span><br><span class="line"> Plugins:</span><br><span class="line">  Volume: <span class="built_in">local</span></span><br><span class="line">  Network: bridge host ipvlan macvlan null overlay</span><br><span class="line">  Log: awslogs fluentd gcplogs gelf journald json-file <span class="built_in">local</span> logentries splunk </span><br><span class="line">... 省略</span><br></pre></td></tr></table></figure></div>

<h2 id="Docker-镜像命令"><a href="#Docker-镜像命令" class="headerlink" title="Docker 镜像命令"></a>Docker 镜像命令</h2><p>镜像是 Docker 容器的基石，容器是镜像的运行实例，有了镜像才能启动容器。</p>
<h3 id="1-列出所有镜像"><a href="#1-列出所有镜像" class="headerlink" title="1. 列出所有镜像"></a>1. 列出所有镜像</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line">[root@192 docker]# docker images</span><br><span class="line">REPOSITORY      TAG      IMAGE ID       CREATED         SIZE</span><br></pre></td></tr></table></figure></div>

<p>选项说明：</p>
<ul>
<li>REPOSITORY：表示镜像的仓库源</li>
<li>TAG：镜像的标签版本号</li>
<li>IMAGE ID：镜像ID</li>
<li>CREATED：镜像创建时间</li>
<li>SIZE：镜像大小</li>
</ul>
<h3 id="2-获取镜像"><a href="#2-获取镜像" class="headerlink" title="2. 获取镜像"></a>2. 获取镜像</h3><p>拉取 Docker 仓库中该镜像的最新版本。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker images pull [镜像名[:TAG]]</span><br></pre></td></tr></table></figure></div>

<p>如果不显示地指定 TAG，则默认会选择 latest 标签，即下载仓库中最新版本的镜像。</p>
<h3 id="3-搜索镜像"><a href="#3-搜索镜像" class="headerlink" title="3. 搜索镜像"></a>3. 搜索镜像</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker search [镜像名]</span><br></pre></td></tr></table></figure></div>

<p>选项：</p>
<ul>
<li>–automated&#x3D;false，仅显示自动创建的镜像</li>
<li>–on-trunc&#x3D;false，输出信息不截断显示</li>
<li>-s, –stars&#x3D;0，指定仅显示评价为指定星级以上的镜像。</li>
</ul>
<p>Docker Hub 官方地址：<a class="link"   href="https://hub.docker.com/" >Docker Hub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="4-运行镜像"><a href="#4-运行镜像" class="headerlink" title="4. 运行镜像"></a>4. 运行镜像</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [镜像名]</span><br></pre></td></tr></table></figure></div>

<h3 id="5-删除镜像"><a href="#5-删除镜像" class="headerlink" title="5. 删除镜像"></a>5. 删除镜像</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除一个镜像</span></span><br><span class="line">docker rmi [镜像名/镜像ID]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除多个，镜像ID或镜像名用`空格`隔开即可</span></span><br><span class="line">docker rmi 镜像名/镜像ID 镜像名/镜像ID</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除全部镜像，-a：显示全部，-q：只显示ID</span></span><br><span class="line">docker rmi -f $(docker images -aq)</span><br></pre></td></tr></table></figure></div>

<p>参数：</p>
<ul>
<li>-f：强制删除</li>
</ul>
<h2 id="Docker-运维命令"><a href="#Docker-运维命令" class="headerlink" title="Docker 运维命令"></a>Docker 运维命令</h2><h3 id="1-启动-Docker-1"><a href="#1-启动-Docker-1" class="headerlink" title="1. 启动 Docker"></a>1. 启动 Docker</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></div>

<h3 id="2-docker-开机自启"><a href="#2-docker-开机自启" class="headerlink" title="2. docker 开机自启"></a>2. docker 开机自启</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure></div>

<h3 id="3-查看-docker-运行状态"><a href="#3-查看-docker-运行状态" class="headerlink" title="3. 查看 docker 运行状态"></a>3. 查看 docker 运行状态</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure></div>

<h3 id="4-查看-docker-日志"><a href="#4-查看-docker-日志" class="headerlink" title="4. 查看 docker 日志"></a>4. 查看 docker 日志</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">journalctl -u docker.service</span><br><span class="line">或者</span><br><span class="line">less /var/log/messages | grep Docker</span><br></pre></td></tr></table></figure></div>

<h3 id="5-docker-监控相关"><a href="#5-docker-监控相关" class="headerlink" title="5. docker 监控相关"></a>5. docker 监控相关</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器的资源使用率</span></span><br><span class="line">docker stats container_ID</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">限制 cpu 和内存资源</span></span><br><span class="line">docker run --cpus=1 -m=2g --name nginx -d nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看磁盘大小</span> </span><br><span class="line">docker system df</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看每个 image、container 详细大小</span></span><br><span class="line">docker system df -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 <span class="built_in">dir</span> 路径</span></span><br><span class="line">docker info | grep -i dir</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/02/07/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>IDEA快捷键</title>
    <url>/2024/02/08/idea/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h1 id="通用型"><a href="#通用型" class="headerlink" title="通用型"></a>通用型</h1><table>
<thead>
<tr>
<th>说明</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>复制</td>
<td>ctrl + c</td>
</tr>
<tr>
<td>粘贴</td>
<td>ctrl +v</td>
</tr>
<tr>
<td>剪切</td>
<td>ctrl + x</td>
</tr>
<tr>
<td>撤销</td>
<td>ctrl + z</td>
</tr>
<tr>
<td>反撤销</td>
<td>ctrl + shift + z</td>
</tr>
<tr>
<td>保存</td>
<td>ctrl + s</td>
</tr>
<tr>
<td>全选</td>
<td>ctrl + a</td>
</tr>
</tbody></table>
<h1 id="提高编写速度"><a href="#提高编写速度" class="headerlink" title="提高编写速度"></a>提高编写速度</h1><table>
<thead>
<tr>
<th>说明</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>智能提示</td>
<td>alt + enter</td>
</tr>
<tr>
<td>提示代码模板</td>
<td>ctrl + j</td>
</tr>
<tr>
<td>使用 xx 块环绕</td>
<td>ctrl + alt + t</td>
</tr>
<tr>
<td>调出生成 getter&#x2F;setter 构造器等结构</td>
<td>alt + insert</td>
</tr>
<tr>
<td>自动生成返回值变量</td>
<td>ctrl + alt + v</td>
</tr>
<tr>
<td>复制指定行的代码</td>
<td>ctrl + d</td>
</tr>
<tr>
<td>删除指定行的代码</td>
<td>ctrl + y</td>
</tr>
<tr>
<td>切换到下一行代码空位</td>
<td>shift + enter</td>
</tr>
<tr>
<td>切换到上一行代码空位</td>
<td>ctrl + alt + enter</td>
</tr>
<tr>
<td>向上移动代码</td>
<td>ctrl + shift + ↑</td>
</tr>
<tr>
<td>方法形参列表提醒</td>
<td>ctrl + p</td>
</tr>
<tr>
<td>批量修改指定的变量名、方法名、类名等</td>
<td>shift + f6</td>
</tr>
<tr>
<td>抽取代码重构方法</td>
<td>ctrl + alt + m</td>
</tr>
<tr>
<td>重新父类的方法</td>
<td>ctrl + o</td>
</tr>
<tr>
<td>实现接口的方法</td>
<td>ctrl + i</td>
</tr>
<tr>
<td>选中的结构的大小写切换</td>
<td>ctrl + shift + u</td>
</tr>
<tr>
<td>批量导包</td>
<td>ctrl + alt + o</td>
</tr>
</tbody></table>
<h1 id="类结构、查找和查看源码"><a href="#类结构、查找和查看源码" class="headerlink" title="类结构、查找和查看源码"></a>类结构、查找和查看源码</h1><table>
<thead>
<tr>
<th>说明</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>如何查看源码</td>
<td>ctrl + 选中指定的结构 或 ctrl + n</td>
</tr>
<tr>
<td>显示当前类结构，支持搜索指定的方法、属性等</td>
<td>ctrl + f12</td>
</tr>
<tr>
<td>退回到前一个编辑的页面</td>
<td>ctrl + alt + ←</td>
</tr>
<tr>
<td>进入到下一个编辑的页面</td>
<td>ctrl + alt + →</td>
</tr>
<tr>
<td>打开的类文件之间切换</td>
<td>alt + ←&#x2F;→</td>
</tr>
<tr>
<td>光标选中指定的类，查看继承树结构</td>
<td>ctrl + h</td>
</tr>
<tr>
<td>查看方法文档</td>
<td>ctrl + q</td>
</tr>
<tr>
<td>类的 UML 关系图</td>
<td>ctrl + alt + u</td>
</tr>
<tr>
<td>定位某行</td>
<td>ctrl + g</td>
</tr>
<tr>
<td>回溯变量或方法的来源</td>
<td>ctrl + alt + b</td>
</tr>
<tr>
<td>折叠方法实现</td>
<td>ctrl + shift + -</td>
</tr>
<tr>
<td>展开方法实现</td>
<td>ctrl + shift + +</td>
</tr>
<tr>
<td>查看类的继承</td>
<td>ctrl + h</td>
</tr>
</tbody></table>
<h1 id="查找、替换与关闭"><a href="#查找、替换与关闭" class="headerlink" title="查找、替换与关闭"></a>查找、替换与关闭</h1><table>
<thead>
<tr>
<th>说明</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>查找指定的结构</td>
<td>ctrl + f</td>
</tr>
<tr>
<td>快速查找：选中的 word 快速定位到下一个</td>
<td>ctrl + I</td>
</tr>
<tr>
<td>查找与替换</td>
<td>ctrl + r</td>
</tr>
<tr>
<td>直接定位到当前行的首位</td>
<td>home</td>
</tr>
<tr>
<td>直接定位到当前行的末尾</td>
<td>end</td>
</tr>
<tr>
<td>查找当前元素在当前文件中的引用，然后按 F3 可以选择</td>
<td>ctrl + f7</td>
</tr>
<tr>
<td>全项目搜索文本</td>
<td>ctrl + shift + f</td>
</tr>
<tr>
<td>关闭当前窗口</td>
<td>ctrl + f4</td>
</tr>
</tbody></table>
<h1 id="调整格式"><a href="#调整格式" class="headerlink" title="调整格式"></a>调整格式</h1><table>
<thead>
<tr>
<th>说明</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>格式化代码</td>
<td>ctrl + alt + l</td>
</tr>
<tr>
<td>使用单行注释</td>
<td>ctrl + &#x2F;</td>
</tr>
<tr>
<td>使用 &#x2F; 取消多行注释</td>
<td>ctrl + shift + &#x2F;</td>
</tr>
<tr>
<td>选择数行，整体往后移动</td>
<td>tab</td>
</tr>
<tr>
<td>选中数行，整体往前移动</td>
<td>shift + tab</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang基础语法</title>
    <url>/2024/02/08/go/Golang%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="GO-基础语法"><a href="#GO-基础语法" class="headerlink" title="GO 基础语法"></a>GO 基础语法</h2><h3 id="go-关键字"><a href="#go-关键字" class="headerlink" title="go 关键字"></a>go 关键字</h3><p>go 语言中一共有 25 个关键字。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span> <span class="keyword">default</span> <span class="function"><span class="keyword">func</span> <span class="title">interface</span> <span class="title">select</span> <span class="title">case</span> <span class="title">defer</span></span></span><br><span class="line"><span class="keyword">go</span> <span class="keyword">map</span> <span class="keyword">struct</span> <span class="keyword">chan</span> <span class="keyword">else</span> <span class="keyword">goto</span> <span class="keyword">package</span> <span class="keyword">switch</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">fallthrough</span> <span class="keyword">if</span> <span class="keyword">range</span> <span class="keyword">type</span> <span class="keyword">continue</span> <span class="keyword">for</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">return</span> <span class="keyword">var</span></span><br></pre></td></tr></table></figure></div>

<h3 id="go-数据类型定义"><a href="#go-数据类型定义" class="headerlink" title="go 数据类型定义"></a>go 数据类型定义</h3><ol>
<li><code>var</code>声明定义一个变量，定义后，值可修改</li>
<li><code>const</code>声明定义一个变量，定义后，值不可修改</li>
<li><code>:=</code>定义一个变量，类型由后面的值觉得。<strong>常用定义方式</strong></li>
</ol>
<h3 id="go-数据类型"><a href="#go-数据类型" class="headerlink" title="go 数据类型"></a>go 数据类型</h3><p><strong>go数据类型主要分为两类：基本数据类型和派生数据类型</strong></p>
<h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p>整型、浮点型、字符串、布尔型、字符型</p>
<h5 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">类型：int8、int16、int32、int64、uint8、uint16、uint32、uint64、byte</span><br><span class="line">长度说明：位即是一个二进制位，8 即2^8=256，如果是有符号则需要一位作为符号位</span><br><span class="line"></span><br><span class="line">整型：分为有符号和无符号。无符号即有符号前加多个 u</span><br><span class="line">例如：有符号8位 int8、无符号8位 uint8</span><br></pre></td></tr></table></figure></div>

<h5 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h5><table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>范围</td>
<td>32位、64位</td>
</tr>
</tbody></table>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">浮点型只有两种类型，float32 和 float64，默认：64，64位更加精准</span><br></pre></td></tr></table></figure></div>

<p>PS：底层存储空间和操作系统无关</p>
<p>PS：浮点类型底层存储：符号位 + 指数位 + 尾数位，所以尾数位只是存了一个大概，很可能出现精度的丢失。</p>
<h5 id="字符和字符串"><a href="#字符和字符串" class="headerlink" title="字符和字符串"></a>字符和字符串</h5><p>字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的，也就是说对于传统的字符串是由字符组成的，而 Go 的字符串是由字节组成的。</p>
<ol>
<li><p>字符使用单引号定义字符，字符定义后无法修改</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> word <span class="type">byte</span> = <span class="string">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>字符串可以用双引号和反引号定义，字符串定义后可修改</p>
<p>双引号会解析特殊字符，如 \n 或 \r 等，反引号直接原样处理。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> word <span class="type">string</span> = <span class="string">&quot;hello \n world&quot;</span></span><br><span class="line"><span class="keyword">var</span> word2 <span class="type">string</span> = <span class="string">`hello \n world`</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<h5 id="基本数据类型相互转换"><a href="#基本数据类型相互转换" class="headerlink" title="基本数据类型相互转换"></a>基本数据类型相互转换</h5><p>Golang 和 Java&#x2F;C 不同，Golang 在不同类型的变量之间赋值时<strong>需要显示转换</strong>。也就是 Golang 中数据类型<strong>不能自动转换</strong>。</p>
<p><strong>基本语法：</strong></p>
<ul>
<li>表达式 <code>T(v)</code>将值 v 转换为类型 T</li>
</ul>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num <span class="type">int</span> = <span class="number">100</span></span><br><span class="line"><span class="comment">// 转浮点型</span></span><br><span class="line"><span class="keyword">var</span> float <span class="type">float64</span> = <span class="type">float64</span>(num)</span><br><span class="line"><span class="comment">// 转整型无符号8位</span></span><br><span class="line"><span class="keyword">var</span> ui <span class="type">uint8</span> = <span class="type">uint8</span>(num)</span><br><span class="line">fmt.Println(num, float, ui)</span><br></pre></td></tr></table></figure></div>

<p><strong>其他类型转字符串</strong></p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一（推荐）</span></span><br><span class="line"><span class="keyword">var</span> num <span class="type">int</span> = <span class="number">23</span></span><br><span class="line"><span class="keyword">var</span> n2 <span class="type">float32</span> = <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 <span class="type">string</span> = fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, num)</span><br><span class="line">fmt.Println(s1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2 <span class="type">string</span> = fmt.Sprintf(<span class="string">&quot;%f&quot;</span>, n2)</span><br><span class="line">fmt.Println(s2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="keyword">var</span> num <span class="type">int</span> = <span class="number">99</span></span><br><span class="line"><span class="keyword">var</span> num2 <span class="type">float64</span> = <span class="number">23.456</span></span><br><span class="line"><span class="keyword">var</span> isTrue <span class="type">bool</span> = <span class="literal">true</span></span><br><span class="line"><span class="keyword">var</span> str <span class="type">string</span> = strconv.FormatInt(<span class="type">int64</span>(num), <span class="number">10</span>)</span><br><span class="line">fmt.Println(str)</span><br><span class="line"></span><br><span class="line">str = strconv.FormatFloat(num2, <span class="string">&#x27;f&#x27;</span>, <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line">fmt.Println(str)</span><br><span class="line"></span><br><span class="line">str = strconv.FormatBool(isTrue)</span><br><span class="line">fmt.Println(str)</span><br></pre></td></tr></table></figure></div>

<h4 id="派生数据类型"><a href="#派生数据类型" class="headerlink" title="派生数据类型"></a>派生数据类型</h4><p>指针、数组、切片、函数、map、结构体、通道、接口</p>
<h5 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h5><p>指针保存变量在内存中的地址，与 C 类似，类似 Java 中的引用</p>
<ol>
<li>用<code>*类型</code>来定义指针变量，对于指针变量，可以用<code>*变量名</code>来获取内存地址指向的值</li>
<li>&amp; 用来获取变量的地址</li>
</ol>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">a := <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> num *<span class="type">int</span> = &amp;a</span><br><span class="line">fmt.Println(*num)</span><br></pre></td></tr></table></figure></div>

<h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><p>map 是一种无序的基于 key-value 的数据结构，Go 语言中的 map 是引用类型，必须初始化才能使用。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 需要使用 make() 方法初始化 map</span></span><br><span class="line">	<span class="keyword">var</span> gomap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>)</span><br><span class="line">	<span class="comment">// 添加</span></span><br><span class="line">	gomap[<span class="number">1</span>] = <span class="type">string</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">	gomap[<span class="number">2</span>]= <span class="type">string</span>(<span class="string">&quot;golang&quot;</span>)</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 遍历</span></span><br><span class="line">	<span class="keyword">for</span> key,value := <span class="keyword">range</span> gomap &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;index: %v, value: %v \n&quot;</span>, key, value)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;---------------------&quot;</span>)</span><br><span class="line">	<span class="comment">// 删除</span></span><br><span class="line">	<span class="built_in">delete</span>(gomap, <span class="number">1</span>)</span><br><span class="line">	<span class="comment">// 遍历</span></span><br><span class="line">	<span class="keyword">for</span> key,value := <span class="keyword">range</span> gomap &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;index: %v, value: %v \n&quot;</span>, key, value)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h5 id="数组与切片"><a href="#数组与切片" class="headerlink" title="数组与切片"></a>数组与切片</h5><p><strong>数组：</strong>go 数组与 C 相似。需要定义数组类型，和数组长度。数组长度定义后不能修改。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> intArr [<span class="number">4</span>]<span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> strArr [<span class="number">2</span>]<span class="type">string</span></span><br><span class="line">	<span class="keyword">var</span> arr = [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> doubleArr = [...][<span class="number">2</span>]<span class="type">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;</span><br><span class="line">	</span><br><span class="line">	fmt.Println(intArr)</span><br><span class="line">	fmt.Println(strArr)</span><br><span class="line">	fmt.Println(arr)</span><br><span class="line">	fmt.Println(doubleArr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>切片（Slice）：</strong>在<code>GO</code>语言中，数组是一个固定长度的序列，而切片则是一个可变长度的序列。切片是建立在数组之上的，它提供了<code>动态数组</code>的功能，可以根据需要动态地增加或缩小切片的长度。与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s []<span class="type">int</span></span><br><span class="line">	s1 := []<span class="type">int</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	</span><br><span class="line">	fmt.Println(s)</span><br><span class="line">	fmt.Println(s1)</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>还可以使用<code>make</code>函数来创建一个指定长度和容量的切片。</p>
<p><code>make</code>的第一个参数为切片类型；第二个参数为切片长度（即实际存储的元素个数）；第三个参数为切片容量，该参数为可选参数，如果为空则值默认为切片长度。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 创建一个长度为 3、容量为 5 的整型切片</span></span><br><span class="line">	slice := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">	<span class="comment">// 创建一个长度为 3、容量为 3 的字符串切片</span></span><br><span class="line">	slice2 := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">3</span>)</span><br><span class="line">	</span><br><span class="line">	fmt.Println(slice)</span><br><span class="line">	fmt.Println(slice2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>还可以直接通过数组或切片来创建一个新的切片，新切片的长度等于从原始数组或切片中指定的开始和结束索引之间的元素个数，容量等于原始数组或切片的长度减去开始索引（<code>s := arr[startIndex:endIndex]</code>）。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">arr := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">// 创建一个从 arr[1] 开始到 arr[4] 结束的切片</span></span><br><span class="line">slice3 := arr[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line"><span class="comment">// 创建一个新切片，容量等于原始切片的长度</span></span><br><span class="line">slice4 := slice3[:]</span><br></pre></td></tr></table></figure></div>

<p>**注意：**当直接从另一个切片创建一个新切片时，两个切片将**共享相同的底层数组**。因此，修改一个切片的元素也会影响到另一个切片。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">arr := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">// 创建一个从 arr[1] 开始到 arr[4] 结束的切片</span></span><br><span class="line">slice3 := arr[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line"><span class="comment">// 创建一个新切片，容量等于原始切片的长度</span></span><br><span class="line">slice4 := slice3[:]</span><br><span class="line">slice3[<span class="number">2</span>] = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">fmt.Println(slice3)</span><br><span class="line">fmt.Println(slice4)</span><br><span class="line">fmt.Println(arr)</span><br></pre></td></tr></table></figure></div>

<p><strong>切片追加元素</strong></p>
<p>使用内置的<code>append</code>函数向切片中追加元素，如果切片的容量不够，则会自动扩容。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个空的切片</span></span><br><span class="line"><span class="keyword">var</span> slice6 []<span class="type">int</span></span><br><span class="line"><span class="comment">// 向切片中追加元素</span></span><br><span class="line">slice6 = <span class="built_in">append</span>(slice6, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">fmt.Println(slice6)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向切片中追加元素</span></span><br><span class="line">slice6 = <span class="built_in">append</span>(slice6, <span class="number">9</span>)</span><br><span class="line">fmt.Println(slice6)</span><br></pre></td></tr></table></figure></div>

<p><strong>切片遍历</strong></p>
<p>可以使用<code>for</code>循环或者和<code>for - range</code>关键字来遍历切片中的元素。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">arr := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;------ for i ----&quot;</span>)</span><br><span class="line"><span class="comment">// for 循环遍历切片</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i ++ &#123;</span><br><span class="line">    <span class="built_in">println</span>(arr[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;---------- for range ------&quot;</span>)</span><br><span class="line"><span class="comment">// for range 遍历切片</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> arr &#123;</span><br><span class="line">    <span class="built_in">println</span>(key, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>切片复制</strong></p>
<p>可以使用内置<code>copy</code>函数将一个切片中的元素复制到另一个切片中。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">slice6 := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">// 创建一个包含 3 个元素的整数数组</span></span><br><span class="line">slice7 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">// 将 slice6 中的元素复制到 slice7 中</span></span><br><span class="line"><span class="built_in">copy</span>(slice7, slice6)</span><br><span class="line">fmt.Println(slice7)</span><br></pre></td></tr></table></figure></div>

<p><strong>切片排序</strong></p>
<p>可以使用<code>sort</code>包中的函数对切片进行排序。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">sortArr := []<span class="type">int</span>&#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>&#125;</span><br><span class="line">sort.Ints(sortArr)</span><br><span class="line">fmt.Println(sortArr)</span><br></pre></td></tr></table></figure></div>

<h5 id="结构体和面向对象"><a href="#结构体和面向对象" class="headerlink" title="结构体和面向对象"></a>结构体和面向对象</h5><p>Go 中没有“类”的概念，也不支持“类”的继承和面向对象的概念。GO 语言中通过结构体的内嵌在配合接口比面向对象有更高的扩展性和灵活性。</p>
<p><strong>结构体定义</strong></p>
<p>结构体中字段大写开头表示公开访问，小写表示私有（仅在定义当前结构体的包中可访问）</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> &lt;类型名&gt; <span class="keyword">struct</span> &#123;</span><br><span class="line">    字段名 字段类型</span><br><span class="line">    字段名 字段类型</span><br><span class="line">    字段名 字段类型</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过<code>.</code>号访问结构体属性（与 C 类似）</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	user := user&#123;<span class="string">&quot;fly&quot;</span>, <span class="number">18</span>&#125;</span><br><span class="line">	fmt.Println(user.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>结构体实例化方式</strong></p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 键值对初始化</span></span><br><span class="line">user2 := &amp;user &#123;name: <span class="string">&quot;fly2&quot;</span>, age: <span class="number">22</span>&#125;</span><br><span class="line">fmt.Println(user2.name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 值列表</span></span><br><span class="line">user3 := &amp;user&#123;<span class="string">&quot;fly3&quot;</span>, <span class="number">23</span>&#125;</span><br><span class="line">fmt.Println(user3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// new 关键字</span></span><br><span class="line">user4 := <span class="built_in">new</span>(user)</span><br><span class="line">user4.name = <span class="string">&quot;fly4&quot;</span></span><br><span class="line">fmt.Println(user4.name)</span><br></pre></td></tr></table></figure></div>

<h5 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h5><p>语法格式</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">type &lt;类型名&gt; 类型描述</span><br><span class="line">type ui8 = uint8</span><br><span class="line">// 定义结构体变量</span><br><span class="line">var i ui8 = 1</span><br><span class="line">fmt.Println(i)</span><br></pre></td></tr></table></figure></div>

<h5 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h5><p><strong>什么是标识符？</strong></p>
<p> 变量，方法等，只要是起名字的地方，那个名字就是标识符</p>
<p><strong>标识符定义规则：</strong></p>
<ol>
<li><p>三个可以（组成部分）：数字、字母、下划线</p>
</li>
<li><p>四个注意：</p>
<ol>
<li>不可以以数字开头</li>
<li>严格区分大小写</li>
<li>不能包含空格</li>
<li>不可以使用 GO 中的保留关键字</li>
</ol>
</li>
<li><p>见名知意：增加可读性</p>
</li>
<li><p>下划线”_”本身在 GO 中是一个特殊的标识符，称为空标识符。可以代表任何其他的标识符，但是它对应的值会被忽略（比如：忽略某个返回值）。所以仅能被作为占位符使用，不能单独作为标识符使用。</p>
</li>
<li><p>可以用如下形式，但是不建议：var int int &#x3D; 10 (int, float32, float64 等不算是保留关键字，但是也尽量不要使用)</p>
</li>
<li><p>长度无限制，但是不建议太长</p>
</li>
<li><p>起名规则</p>
<ol>
<li><p>包名：尽量保持 package 的名字和目录保持一致，尽量采取有意义的包名，简短，有意义，不要和标准库冲突</p>
<ul>
<li>为什么之前在定义源文件的时候，一般我们都用 package main 包？</li>
</ul>
<p>main 包是一个程序的入口包，所以 main 函数它所在的包建议定义为 main 包，如果不定义为 main 包，那么就不能得到可执行文件。</p>
<ul>
<li>尽量保持 package 的名字和目录保持一致</li>
<li>和标准库不要冲突</li>
</ul>
</li>
<li><p>变量名、函数名、常量名：采用<code>驼峰命名法</code></p>
</li>
<li><p>如果变量名、函数名、常量名首字母大写，则可以被其他的包访问；如果首字母小写，则只能在本包中使用</p>
</li>
</ol>
</li>
</ol>
<p>注意：</p>
<ol>
<li>import 导入语句通常放在文件开头包声明语句的下面。</li>
<li>导入的包名需要使用双引号包裹起来。</li>
<li>包名是从 $GOPATH&#x2F;src&#x2F; 开始计算的，使用 &#x2F; 进行路径分隔。</li>
</ol>
<p>需要配置一个环境变量：GOPATH</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>定义：对特定的功能进行提取，形成一个代码片段，这个代码片段就是我们所说的函数</p>
<p>作用：提高代码的复用性</p>
<p>基本语法</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 函数名<span class="params">(形参列表)</span></span> (返回值类型列表) &#123;</span><br><span class="line">    <span class="keyword">return</span> 返回值列表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>（1）函数名：</p>
<ul>
<li>遵循标识符命名规范：见名知意，驼峰命名</li>
<li>首字母不能是数字</li>
<li>首字母大写该函数可以被本包文件和其他包文件使用（类似 public）</li>
<li>首字母小写只能被本包文件使用，其他包文件不能使用（类似 private）</li>
</ul>
<p>（2）形参列表</p>
<p> 形参列表：个数：可以是一个参数，可以是 n 个参数，可以是 0 个参数</p>
<p> 形式参数列表：作用：接收外来的数据</p>
<p> 实际参数：实际的数据</p>
<p>（3）返回值类型列表</p>
<p>个数：可以 0 个，1 个或者多个</p>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><h4 id="错误处理-捕获机制"><a href="#错误处理-捕获机制" class="headerlink" title="错误处理&#x2F;捕获机制"></a>错误处理&#x2F;捕获机制</h4><p>go 中追求代码优雅，引入机制：defer + recover 机制处理错误</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	test()</span><br><span class="line">	fmt.Println(<span class="string">&quot;finish!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 利用 defer + recover 来捕获错误</span></span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="comment">// 调用 recover 内置函数, 可以捕获错误</span></span><br><span class="line">		err := <span class="built_in">recover</span>()</span><br><span class="line">		<span class="comment">// 如果没有捕获错误, 返回值为零值: nil</span></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;错误已经捕获&quot;</span>)</span><br><span class="line">			fmt.Println(<span class="string">&quot;err是：&quot;</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	num1 := <span class="number">10</span></span><br><span class="line">	num2 := <span class="number">0</span></span><br><span class="line">	result := num1 / num2</span><br><span class="line">	fmt.Println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>优点：提高程序健壮性</p>
<h4 id="自定义错误"><a href="#自定义错误" class="headerlink" title="自定义错误"></a>自定义错误</h4><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;errors&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	err := test2(<span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;自定义错误：&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;正常执行下面流程...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">(num1 <span class="type">int</span>, num2 <span class="type">int</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> num2 == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> errors.New(<span class="string">&quot;除数不能为0&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		result := num1 / num2</span><br><span class="line">		fmt.Println(result)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 实现的功能: 给出 5 个学生的成绩, 求出成绩的总和、平均数</span></span><br><span class="line">	arr()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">arr</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 初始化数组</span></span><br><span class="line">	<span class="keyword">var</span> score [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">	score[<span class="number">0</span>] = <span class="number">95</span></span><br><span class="line">	score[<span class="number">1</span>] = <span class="number">91</span></span><br><span class="line">	score[<span class="number">2</span>] = <span class="number">49</span></span><br><span class="line">	score[<span class="number">3</span>] = <span class="number">66</span></span><br><span class="line">	score[<span class="number">4</span>] = <span class="number">22</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> sum <span class="type">int</span> = <span class="number">0</span></span><br><span class="line">	<span class="comment">// 总和</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(score); i ++ &#123;</span><br><span class="line">		sum += score[i]</span><br><span class="line">	&#125;</span><br><span class="line">	avg := <span class="type">float32</span>(sum) / <span class="type">float32</span>(<span class="built_in">len</span>(score))</span><br><span class="line">	fmt.Println(<span class="string">&quot;总和：&quot;</span>, sum)</span><br><span class="line">	fmt.Println(<span class="string">&quot;平均分：&quot;</span>, avg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK17新特性</title>
    <url>/2024/02/08/java/JDK17%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h2 id="1-Java-Record"><a href="#1-Java-Record" class="headerlink" title="1. Java Record"></a>1. Java Record</h2><p> Java14 中预览的新特性叫做 Record，在 Java 中，Record 是一种特殊类型的 Java 类。可用来创建不可变类，语法简短。参考 <a class="link"   href="https://openjdk.java.net/jeps/395" >JEP 395 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，Jackson 2.12 支持 Record 类。</p>
<p><strong>Java Record 避免上述的样板代码，如下特点：</strong></p>
<ol>
<li>带有全部参数的构造方法</li>
<li>public 访问器</li>
<li>toString(), hashCode(), equals() 方法</li>
<li>无 set，get 方法。没有遵循 Bean 的命名规范</li>
<li>final 类，不能继承 Record，Record 为隐式的 final 类。除此之外与普通类一样。</li>
<li>不可变类，通过构造创建 Record。</li>
<li>final 属性，不可修改。</li>
<li>不能声明实例属性，能声明 static 成员。</li>
</ol>
<h3 id="Record-使用"><a href="#Record-使用" class="headerlink" title="Record 使用"></a>Record 使用</h3><p><strong>Record 使用</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">User</span><span class="params">(Integer id, String name, String email, Integer age)</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>Instance Method</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">User</span><span class="params">(Integer id, String name, String email, Integer age)</span> &#123;</span><br><span class="line">    <span class="comment">// 实例方法，concat 连接字符串</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">concat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;姓名是%s，年龄是%d&quot;</span>, <span class="built_in">this</span>.name, <span class="built_in">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法，把 email 转为大写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">emailToUpperCase</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(email)</span><br><span class="line">            .orElse(<span class="string">&quot;no email&quot;</span>)</span><br><span class="line">            .toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>Record的构造方法</strong></p>
<p> 我们可以在 Record 中添加构造方法，有三种类型的构造方法分别是：<strong>紧凑的</strong>，<strong>规范的</strong>和<strong>定制构造方法</strong></p>
<ul>
<li>紧凑型构造方法没有任何参数，甚至没有括号</li>
<li>规范构造方法是以所有成员作为参数</li>
<li>定制构造方法是自定义参数个数</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">User</span><span class="params">(Integer id, String name, String email, Integer age)</span> &#123;</span><br><span class="line">    <span class="comment">// 紧凑型</span></span><br><span class="line">    <span class="keyword">public</span> User &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id=&quot;</span> + id);</span><br><span class="line">        <span class="keyword">if</span> (id &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;id&lt;1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定制构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(id, name, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Record-与-Lombok"><a href="#Record-与-Lombok" class="headerlink" title="Record 与 Lombok"></a>Record 与 Lombok</h3><p> Java Record 是创建不可变类且减少样板代码的好方法。Lombok 是一种减少样板代码的工具。两者有表面上的重叠部分。</p>
<p> Lombok 提供语法的便利性，通常预装一些代码模板，根据您加入到类中的注解自动执行代码模板。这样的库纯粹是为了方便实现 POJO 类。通过预编译代码，将代码的模板加入到 class 中。</p>
<p> Java Record 是语言级别的，一种语义特性，为了建模而用，数据聚合。简单来说就是提供了通用的数据类，充当“<strong>数据载体</strong>”，用于在类和应用程序之间进行数据传输。</p>
<p><strong>Local Record</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">test</span> <span class="operator">=</span> <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">        <span class="comment">// 定义 local record</span></span><br><span class="line">        <span class="keyword">record</span> <span class="title class_">SaleRecord</span><span class="params">(String saleId, String productName, Double money)</span> &#123;&#125;;</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        <span class="type">SalaRecord</span> <span class="variable">saleRecord</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SaleRecord</span>(<span class="string">&quot;S001&quot;</span>, <span class="string">&quot;显示器&quot;</span>, <span class="number">1000.01</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;saleRecord = &quot;</span> + saleRecord);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="2-Switch-表达式"><a href="#2-Switch-表达式" class="headerlink" title="2. Switch 表达式"></a>2. Switch 表达式</h2><p>使用 switch 表达式和语句的<strong>模式匹配</strong>以及对模式语言的扩展来增强 Java 编程语言。这个新特性允许使用新的模式，包括<strong>类型模式</strong>和<strong>守卫模式</strong>。类型模式能够在 switch 表达式中使用 instanceof，守卫模式能够使用布尔表达式。</p>
<h3 id="类型模式"><a href="#类型模式" class="headerlink" title="类型模式"></a>类型模式</h3><p>JDK16 instanceof 模式匹配</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"> 	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String str) &#123;</span><br><span class="line">            <span class="comment">// 直接使用 str</span></span><br><span class="line">            str += <span class="string">&quot;fly&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Integer i) &#123;</span><br><span class="line">            <span class="comment">// 直接使用 i 进行整型逻辑运算</span></span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>JDK17 switch 可直接使用 instanceof 模式匹配选择（需要提前考虑 null 判断）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"> 	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        Object obj;</span><br><span class="line">        <span class="keyword">switch</span>(obj) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="literal">null</span> -&gt; System.out.println(<span class="string">&quot;判空逻辑&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> String s -&gt; System.out.println(<span class="string">&quot;判断字符串逻辑：&quot;</span> + s);</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">record</span> <span class="title class_">r</span> -&gt; System.out.println(<span class="string">&quot;判断 Record 类型逻辑：&quot;</span> + r.toString());</span><br><span class="line">            <span class="keyword">case</span> <span class="type">int</span>[] iArr -&gt; System.out.println(<span class="string">&quot;判断是否 int 数组，长度:&quot;</span> + iArr.length);</span><br><span class="line">            <span class="keyword">case</span> Integer i -&gt; System.out.println(<span class="string">&quot;判断是否 Integer 对象，i:&quot;</span> + i);</span><br><span class="line">            <span class="keyword">case</span> User u -&gt; System.out.println(<span class="string">&quot;判断是否为 User 对象，user: &quot;</span> + u.toString());</span><br><span class="line">            <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="守卫模式"><a href="#守卫模式" class="headerlink" title="守卫模式"></a>守卫模式</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span>(obj) &#123;</span><br><span class="line">            <span class="keyword">case</span> String s &amp;&amp; s.length() &gt; <span class="number">0</span> -&gt; s;</span><br><span class="line">            <span class="keyword">default</span> -&gt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;           </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Switch-特点"><a href="#Switch-特点" class="headerlink" title="Switch 特点"></a>Switch 特点</h3><ul>
<li>支持箭头表达式</li>
<li>支持 yield 返回值</li>
<li>支持 Java Record</li>
</ul>
<h4 id="箭头表达式"><a href="#箭头表达式" class="headerlink" title="箭头表达式"></a>箭头表达式</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">week</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span>(week) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span> -&gt; message = <span class="string">&quot;星期日，休息&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> -&gt; message = <span class="string">&quot;工作日&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span> -&gt; message = <span class="string">&quot;星期六，休息&quot;</span>;</span><br><span class="line">            <span class="keyword">default</span> -&gt; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;无效数据！&quot;</span>);</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="yield-返回值"><a href="#yield-返回值" class="headerlink" title="yield 返回值"></a>yield 返回值</h4><ul>
<li>yield 让 switch 作为表达式，能够返回值；</li>
<li>无需中间变量，switch 作为表达式计算，可以得到结果，yield 是表达式的返回值；</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">week</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> swithc(week) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">yield</span> <span class="string">&quot;周日，休息&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">yield</span> <span class="string">&quot;工作日&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="keyword">yield</span> <span class="string">&quot;周六，休息&quot;</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">yield</span> <span class="string">&quot;无效数据&quot;</span>;</span><br><span class="line">        &#125;;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="多表达式，case-与-yield-结合使用"><a href="#多表达式，case-与-yield-结合使用" class="headerlink" title="多表达式，case 与 yield 结合使用"></a>多表达式，case 与 yield 结合使用</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">week</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">switch</span>(week) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span> -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;周日，休息&quot;</span>);</span><br><span class="line">                <span class="keyword">yield</span> <span class="string">&quot;周日，休息&quot;</span>;</span><br><span class="line">            &#125;      </span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;工作日&quot;</span>);</span><br><span class="line">                <span class="keyword">yield</span> <span class="string">&quot;工作日&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span> -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;周六，休息&quot;</span>);</span><br><span class="line">                <span class="keyword">yield</span> <span class="string">&quot;周六，休息&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>注意：case -&gt; 不能与 case: 混用，一个 switch 语句块中只能使用一种语法格式</strong></p>
<h2 id="3-文本块"><a href="#3-文本块" class="headerlink" title="3. 文本块"></a>3. 文本块</h2><p>在 Java17 之前的版本里，如果我们需要定义一个复杂的字符串，比如 JSON 字符串：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> + </span><br><span class="line">        <span class="string">&quot; \&quot;name\&quot;: \&quot;Java\&quot;, \n&quot;</span> +</span><br><span class="line">        <span class="string">&quot; \&quot;age\&quot;: 20, \n&quot;</span> + </span><br><span class="line">        <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这种方式定义有几个问题：</p>
<ul>
<li>双引号需要进行转义；</li>
<li>为了字符串的可读性需要通过 <strong>+</strong> 号连接；</li>
<li>如果需要将 JSON 复制到代码中需要做大量的格式调整；</li>
</ul>
<p>通过 Java17 中的文本块语法，类似的字符串处理则会方便很多；通过三个双引号可以定义一个文本块，并且结束的三个双引号不能和开始的在同一行。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &quot;name&quot;: &quot;java&quot;,</span></span><br><span class="line"><span class="string">                &quot;age&quot;: 18</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="4-Stream-toList-方法"><a href="#4-Stream-toList-方法" class="headerlink" title="4. Stream.toList() 方法"></a>4. Stream.toList() 方法</h2><p>如果需要将 Stream 转换成 List，需要通过调用 collect() 方法使用 Collectors.toList() 进行转换，代码非常冗长。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; strStream = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">        List&lt;String&gt; strList = strStream.collect(Collectos.toList());</span><br><span class="line">        <span class="keyword">for</span> (String s : strList) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在 Java17 中将变得简单，可以直接调用 toList() 方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        Stream&lt;String&gt; strStream = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">        List&lt;String&gt; strList = strStream.toList();</span><br><span class="line">        <span class="keyword">for</span> (String s : strList) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="5-var"><a href="#5-var" class="headerlink" title="5. var"></a>5. var</h2><p>  在 JDK10 以及更高版本中，可以使用 var 标识符声明具有非空初始化的局部变量，这可以帮助我们编写简介的代码，消除冗余信息使代码更具可读性。</p>
<h3 id="var-声明局部变量"><a href="#var-声明局部变量" class="headerlink" title="var 声明局部变量"></a>var 声明局部变量</h3><ul>
<li>var 特点<ul>
<li>var 是一个保留字，不是关键字（可以声明 var 为变量名）</li>
<li>方法内声明的局部变量，必须有初始值，不能为空</li>
<li>每次声明一个变量，不能复合声明多个变量</li>
<li>var 动态类型是编译器根据变量所赋的值来推断类型</li>
<li>var 代替显示类型，代码简洁，减少不必要的排版</li>
</ul>
</li>
<li>var 优缺点<ul>
<li>代码简洁和整齐</li>
<li>降低了程序的可读性</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>动态 Druid 连接池</title>
    <url>/2024/02/07/java/%E5%8A%A8%E6%80%81-Druid-%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    <content><![CDATA[<h2 id="动态-Druid-连接池"><a href="#动态-Druid-连接池" class="headerlink" title="动态 Druid 连接池"></a>动态 Druid 连接池</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p> <strong>需求</strong>：因项目业务需求，需要在系统上配置不同数据库，然后进行连接获取数据库相关数据； 原生 JDBC 通过 DriverManager 进行连接每次都要重新进行连接，导致整体查询时间效率变低，故引入 Druid 连接池；<br>  但是不同类型数据库生成<code>DruidDataSource</code>后没有将<code>DS(DruidDataSource)</code>进行缓存起来， 本质还是每次连接数据库时还是重新进行数据库连接，问题依然存在。<br>  所以设计了一个<code>容器</code>将<code>DS</code>缓存起来，考虑到容器里数量限制，使用<code>LinkedHashMap</code>进行存储数据，控制存储<code>DS</code>的数量。 另考虑缓存起来的<code>DS</code>存在数据库密码修改的情况，支持更新<code>容器</code>内<code>DS</code>的<code>密码</code>，保证 DS 可用。<br>具体代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接池工具类</span></span><br><span class="line"><span class="comment"> * Created by fengxuguang on 2023/12/28 11:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConnectionPoolUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化大小, 设置为 10</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INITIAL_SIZE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最小线程数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_IDLE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大线程数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ACTIVE</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接等待超时时间, 单位: 毫秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_WAIT</span> <span class="operator">=</span> <span class="number">60_000</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 间隔多久检测一次需要关闭的空闲连接, 单位: 毫秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TIME_BETWEEN_EVICTION_RUNS_MILLIS</span> <span class="operator">=</span> <span class="number">200_000</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重连次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CONNECTION_ERRORS_RETRY_COUNT</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置一个空闲连接在池中最小生存的时间, 单位是毫秒, 设置 5 分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_EVICT_TABLE_IDLE_TIME_MILLIS</span> <span class="operator">=</span> <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接池容器最大数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CONTAINER_MAX_SIZE</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接池容器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;DbSourceKey, DruidDataSource&gt; containers = <span class="keyword">new</span> <span class="title class_">ContainerLinkedHashMap</span>(CONTAINER_MAX_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 DataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> driverName 连接 driver-class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connStr 连接 url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> validateQuery 校验查询语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DruidDataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> DruidDataSource <span class="title function_">getDataSource</span><span class="params">(String driverName, String connStr, String username, String password,</span></span><br><span class="line"><span class="params">                                                String validateQuery)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DbSourceKey</span> <span class="variable">dbSourceKey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DbSourceKey</span>(connStr, username, password);</span><br><span class="line">            <span class="keyword">if</span> (containers.containsKey(dbSourceKey)) &#123;</span><br><span class="line">                <span class="keyword">return</span> getDruidDataSource(dbSourceKey);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            containers.put(dbSourceKey, createDruidDataSource(driverName, connStr, username, password, validateQuery));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> containers.get(dbSourceKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;创建数据源连接池失败：&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 DruidDataSource 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> driverName driver-class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connStr 连接 url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> validateQuery 保持连接SQL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DruidDataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DruidDataSource <span class="title function_">createDruidDataSource</span><span class="params">(String driverName, String connStr, String username, String password,</span></span><br><span class="line"><span class="params">                                           String validateQuery)</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基础连接信息</span></span><br><span class="line">        ds.setDriverClassName(driverName);</span><br><span class="line">        ds.setUrl(connStr);</span><br><span class="line">        ds.setUsername(username);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化大小</span></span><br><span class="line">        ds.setInitialSize(INITIAL_SIZE);</span><br><span class="line">        ds.setMinIdle(MIN_IDLE);</span><br><span class="line">        ds.setMaxActive(MAX_ACTIVE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接泄露监测</span></span><br><span class="line">        ds.setRemoveAbandoned(<span class="literal">true</span>);</span><br><span class="line">        ds.setRemoveAbandonedTimeout(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置时间</span></span><br><span class="line">        <span class="comment">// 配置获取连接等待超时的时间</span></span><br><span class="line">        ds.setMaxWait(MAX_WAIT);</span><br><span class="line">        <span class="comment">// 配置间隔多久才进行一次检测, 检测需要关闭的空闲连接, 单位: 毫秒</span></span><br><span class="line">        ds.setTimeBetweenEvictionRunsMillis(TIME_BETWEEN_EVICTION_RUNS_MILLIS);</span><br><span class="line">        <span class="comment">// 设置重连次数</span></span><br><span class="line">        ds.setBreakAfterAcquireFailure(<span class="literal">true</span>);</span><br><span class="line">        ds.setConnectionErrorRetryAttempts(CONNECTION_ERRORS_RETRY_COUNT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 防止过期</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(validateQuery)) &#123;</span><br><span class="line">            validateQuery = <span class="string">&quot;SELECT &#x27;x&#x27;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;-1&quot;</span>.equals(validateQuery)) &#123;</span><br><span class="line">            validateQuery = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ds.setValidationQuery(validateQuery);</span><br><span class="line">        ds.setTestWhileIdle(<span class="literal">true</span>);</span><br><span class="line">        ds.setTestOnBorrow(<span class="literal">true</span>);</span><br><span class="line">        ds.setMinEvictableIdleTimeMillis(MIN_EVICT_TABLE_IDLE_TIME_MILLIS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 dbSourceKey 获取 DruidDataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dbSourceKey dbSourceKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DruidDataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DruidDataSource <span class="title function_">getDruidDataSource</span><span class="params">(DbSourceKey dbSourceKey)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!containers.containsKey(dbSourceKey)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// verify whether the password is changed. if the password is changed, update the password in the DruidDataSource</span></span><br><span class="line">        <span class="keyword">if</span> (!dbSourceKey.getPassword().equals(containers.get(dbSourceKey).getPassword())) &#123;</span><br><span class="line">            containers.get(dbSourceKey).setPassword(dbSourceKey.getPassword());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> containers.get(dbSourceKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 容器链表, 用于存储 DruidDataSource, key: DbSourceKey, value: DruidDataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ContainerLinkedHashMap</span> <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;DbSourceKey, DruidDataSource&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 链接最大容量</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> maxSize;</span><br><span class="line"></span><br><span class="line">        ContainerLinkedHashMap(<span class="type">int</span> maxSize) &#123;</span><br><span class="line">            <span class="keyword">if</span> (maxSize &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.maxSize = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> DruidDataSource <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.get(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;DbSourceKey, DruidDataSource&gt; eldest)</span> &#123;</span><br><span class="line">            <span class="comment">// 超过最大容量, 需要移除旧的数据</span></span><br><span class="line">            <span class="keyword">if</span> (containers.size() &gt; maxSize) &#123;</span><br><span class="line">                <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> eldest.getValue();</span><br><span class="line">                druidDataSource.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> containers.size() &gt; maxSize;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储数据源信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DbSourceKey</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 连接 url, 设置后不可修改</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String connStr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 账号, 设置后不可修改</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String account;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 密码, 设置后密码可修改</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Setter</span></span><br><span class="line">        <span class="meta">@Getter</span></span><br><span class="line">        <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">        DbSourceKey(String connStr, String account, String password) &#123;</span><br><span class="line">            <span class="built_in">this</span>.connStr = connStr;</span><br><span class="line">            <span class="built_in">this</span>.account = account;</span><br><span class="line">            <span class="built_in">this</span>.password = password;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">DbSourceKey</span> <span class="variable">that</span> <span class="operator">=</span> (DbSourceKey) o;</span><br><span class="line">            <span class="keyword">return</span> Objects.equals(connStr, that.connStr) &amp;&amp; Objects.equals(account, that.account);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hash(connStr, account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h3><ol>
<li><code>ContainerLinkedHashMap</code>继承<code>LinkedHashMap</code>后重写<code>removeEldestEntry</code>方法的原因。</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedHashMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">HashMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div>

<p>解释：由于<code>LinkedHashMap</code>继承<code>HashMap</code>，<code>LinkedHashMap</code>在调用<code>put</code>方法时，实际是调用<code>HashMap</code>的<code>put</code>方法，<code>HashMap</code>的<code>put</code>方法源码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">afterNodeInsertion</span><span class="params">(<span class="type">boolean</span> evict)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>看源码可知，调用<code>put</code>方法后接着去调用<code>putVal</code>方法，在将数据插入到<code>HashMap</code>后，会调用<code>afterNodeInsertion</code>方法，默认<code>HashMap</code>对此方法不做处理。但是<code>LinkedHashMap</code>对<code>afterNodeInsertion</code>此方法进行了处理，源码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedHashMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">HashMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">afterNodeInsertion</span><span class="params">(<span class="type">boolean</span> evict)</span> &#123; <span class="comment">// possibly remove eldest</span></span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; first;</span><br><span class="line">        <span class="keyword">if</span> (evict &amp;&amp; (first = head) != <span class="literal">null</span> &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> first.key;</span><br><span class="line">            removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在<code>afterNodeInsertion</code>方法内会调用<code>removeEldestEntry</code>方法来判断是否删除链表头数据，默认<code>LinkedHashMap</code>的<code>removeEldestEntry</code>返回<code>false</code>，表示不移除链表头元素。</p>
<p><code>ContainerLinkedHashMap</code>继承<code>LinkedHashMap</code>后，可以对<code>removeEldestEntry</code>方法进行重新，根据链表内的容量来判断是否需要删除链表头元素，以达到控制链表容量的目的。</p>
<p>ps：<code>removeEldestEntry</code>方法在<code>LinkedHashMap</code>调用时传入的参数为链表的头元素。</p>
<p>源码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ContainerLinkedHashMap</span> <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;DbSourceKey, DruidDataSource&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链接最大容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> maxSize;</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;DbSourceKey, DruidDataSource&gt; eldest)</span> &#123;</span><br><span class="line">        <span class="comment">// 超过最大容量, 需要移除旧的数据</span></span><br><span class="line">        <span class="keyword">if</span> (containers.size() &gt; maxSize) &#123;</span><br><span class="line">            <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> eldest.getValue();</span><br><span class="line">            druidDataSource.close();</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> containers.size() &gt; maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBootApplication注解</title>
    <url>/2024/02/08/springboot/SpringBootApplication%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="SpringBootApplication-注解"><a href="#SpringBootApplication-注解" class="headerlink" title="SpringBootApplication 注解"></a>SpringBootApplication 注解</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 省略...</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// exclude 属性表示哪些类需要排除掉, 等同于 EnableAutoConfiguration 类里的 exclude 属性</span></span><br><span class="line">    <span class="meta">@AliasFor(annotation = EnableAutoConfiguration.class)</span></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// excludeName 属性表示哪些类名称需要排除掉, 等同于 EnableAutoConfiguration 类里的 excludeName 属性</span></span><br><span class="line">    <span class="meta">@AliasFor(annotation = EnableAutoConfiguration.class)</span></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// scanBasePackages 属性表示要扫描哪些包下的类, 等同于 ComponentScan 类里的 basePackages 属性</span></span><br><span class="line">    <span class="meta">@AliasFor(annotation = ComponentScan.class, attribute = &quot;basePackages&quot;)</span></span><br><span class="line">    String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// scanBasePackageClasses 属性表示要扫描哪些包下的类，等同于 ComponentScan 类里的 basePackageClasses 属性</span></span><br><span class="line">    <span class="meta">@AliasFor(annotation = ComponentScan.class, attribute = &quot;basePackageClasses&quot;)</span></span><br><span class="line">    Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor(annotation = ComponentScan.class, attribute = &quot;nameGenerator&quot;)</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">BeanNameGenerator</span>&gt; nameGenerator() <span class="keyword">default</span> BeanNameGenerator.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置是否生效, 默认 true, 表示要加载</span></span><br><span class="line">    <span class="meta">@AliasFor(annotation = Configuration.class)</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>@SpringBootApplication 注解是 Spring Boot 中的核心注解，它用于标识一个主要的 Spring Boot 应用程序类。</p>
<p>该注解是一个复合注解，包含：@ComponentScan、@SpringBootConfigure、@EnableAuthConfigure 注解。</p>
<h2 id="ComponentScan-注解"><a href="#ComponentScan-注解" class="headerlink" title="@ComponentScan 注解"></a>@ComponentScan 注解</h2><p>扫描路径为当前解析这个类所在的包路径。</p>
<h2 id="EnableAutoConfigure-注解"><a href="#EnableAutoConfigure-注解" class="headerlink" title="@EnableAutoConfigure 注解"></a>@EnableAutoConfigure 注解</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 省略 ...</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这个注解会负责进行自动配置类的导入，也就是将项目中的配置类自动导入到 Spring 容器中，从而得到解析。</p>
<h2 id="SpringBootConfigure-注解"><a href="#SpringBootConfigure-注解" class="headerlink" title="@SpringBootConfigure 注解"></a>@SpringBootConfigure 注解</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 省略 ...</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Indexed</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AliasFor(annotation = Configuration.class)</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>相当于 <strong>@Configuration</strong> 注解，表示当前类是个配置类。</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Lombok语法</title>
    <url>/2024/02/08/lombok/Lombok%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.18.24&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="NoArgsConstructor-AllArgsConstructor-注解"><a href="#NoArgsConstructor-AllArgsConstructor-注解" class="headerlink" title="@NoArgsConstructor&#x2F;@AllArgsConstructor 注解"></a>@NoArgsConstructor&#x2F;@AllArgsConstructor 注解</h2><p>为该类生成无参构造方法和包含所有参数的构造方法 注解使用位置：类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>编译后生成 class 如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注意：此注解不会把父类的属性 id 拿到 User 的构造器里面去</p>
</blockquote>
<h2 id="Data-注解"><a href="#Data-注解" class="headerlink" title="@Data 注解"></a>@Data 注解</h2><p>相当于注解的集合，效果等同于 @Getter + @Setter + @ToString + @EqualsAndHashCode + @RequiredArgsConstructor 这 5 个注解的效果</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Builder-注解"><a href="#Builder-注解" class="headerlink" title="@Builder 注解"></a>@Builder 注解</h2><p>@Builder 注解提供复制的 builder apis</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>编译后生成 class 如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    User(String name, Integer age) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserBuilder <span class="title function_">builder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserBuilder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UserBuilder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">        UserBuilder() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> UserBuilder <span class="title function_">name</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> UserBuilder <span class="title function_">age</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> User <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="built_in">this</span>.name, <span class="built_in">this</span>.age);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;User.UserBuilder(name=&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;, age=&quot;</span> + <span class="built_in">this</span>.age + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="ToString-注解"><a href="#ToString-注解" class="headerlink" title="@ToString 注解"></a>@ToString 注解</h2><p>用于生成 toString() 方法<br>注解使用位置：类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Setter-注解"><a href="#Setter-注解" class="headerlink" title="@Setter 注解"></a>@Setter 注解</h2><p>用于生成类中成员变量的 set() 方法，同时还可以为生成的方法指定访问修饰符，默认为：public<br>注解使用位置：类&#x2F;成员变量</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Getter-注解"><a href="#Getter-注解" class="headerlink" title="@Getter 注解"></a>@Getter 注解</h2><p>用于生成类中成员变量的 get() 方法，同时还可以为生成的方法指定访问修饰符，默认为：public<br>注解使用位置：类&#x2F;成员变量</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Accessors-注解"><a href="#Accessors-注解" class="headerlink" title="Accessors 注解"></a>Accessors 注解</h2><p>@Accessors 注解为 getter 和 setter 方法设计的更流畅的注解<br>这个注解要搭配 @Getter 和 @Setter 注解使用，用来修改默认的 setter 和 getter 方法的形式</p>
<h3 id="Accessors-注解详解"><a href="#Accessors-注解详解" class="headerlink" title="@Accessors 注解详解"></a>@Accessors 注解详解</h3><ul>
<li>fluent 属性：链式的形式，可以使方法连缀起来进行编写</li>
<li>chain 属性：流式的形式，默认：false</li>
<li>prefix 属性：生成指定前缀的属性 getter 和 setter 方法，并且生成的 getter 与 setter 方法时会去除前缀</li>
</ul>
<h3 id="fluent-属性"><a href="#fluent-属性" class="headerlink" title="fluent 属性"></a>fluent 属性</h3><p>默认为：false，当该值为 true 时，对应字段的 getter 方法前面没有 get，setter 方法前面不会有 set</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Accessors(fluent = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>编译后生成 class 如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">age</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">name</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">age</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="chain-属性"><a href="#chain-属性" class="headerlink" title="chain 属性"></a>chain 属性</h4><p>默认为：false，当该值为 true 时，对应字段的 setter 方法调用后，会返回当前对象，进行链式设置值</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>编译后生成 class 如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="prefix-属性"><a href="#prefix-属性" class="headerlink" title="prefix 属性"></a>prefix 属性</h4><p>该属性是一个字符串数组，当该数组有值时，表示忽略字段中对应的前缀，生成对应的 getter 和 setter 方法<br>如果我们把它的前缀加到 @Accessors 的属性值中，则可以像没有前缀那样，去调用字段的 getter 和 setter 方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Accessors(prefix = &#123;&quot;xx&quot;, &quot;yy&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String xxName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer yyAge;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://localhost:63342/markdownPreview/1806850190/fileSchemeResource/8495b83587bcf8cf47367b7f690708e0-accessors-prefix.jpg?_ijt=sejjqegjglrrjik75q7dbuv4km"
                      alt="accessorprefix"
                ></p>
]]></content>
      <categories>
        <category>lombok</category>
      </categories>
      <tags>
        <tag>lombok</tag>
      </tags>
  </entry>
  <entry>
    <title>1.两数之和【简单】</title>
    <url>/2024/02/08/leetcode/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>
<p>你可以按任意顺序返回答案。</p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 104</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>
<li><code>-109 &lt;= target &lt;= 109</code></li>
<li><strong>只会存在一个有效答案</strong></li>
</ul>
<p><strong>进阶：</strong>你可以想出一个时间复杂度小于 <code>O(n2)</code> 的算法吗？</p>
<p>Related Topics</p>
<p>数组</p>
<p>哈希表</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(target - nums[i])) &#123;</span><br><span class="line">                <span class="type">int</span>[] r = &#123;map.get(target - nums[i]), i&#125;;</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(nums[i], i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>13.罗马数字转整数【简单】</title>
    <url>/2024/02/08/leetcode/13-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure></div>

<p>例如， 罗马数字 <code>2</code> 写做 <code>II</code> ，即为两个并列的 1 。<code>12</code> 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 <code>27</code> 写做 <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p>
<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p>
<ul>
<li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li>
<li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。</li>
<li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li>
</ul>
<p>给定一个罗马数字，将其转换成整数。</p>
<p><strong>示例 1:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;III&quot;</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;IV&quot;</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;IX&quot;</span><br><span class="line">输出: 9</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 4:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;LVIII&quot;</span><br><span class="line">输出: 58</span><br><span class="line">解释: L = 50, V= 5, III = 3.</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 5:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;MCMXCIV&quot;</span><br><span class="line">输出: 1994</span><br><span class="line">解释: M = 1000, CM = 900, XC = 90, IV = 4.</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 15</code></li>
<li><code>s</code> 仅含字符 <code>(&#39;I&#39;, &#39;V&#39;, &#39;X&#39;, &#39;L&#39;, &#39;C&#39;, &#39;D&#39;, &#39;M&#39;)</code></li>
<li>题目数据保证 <code>s</code> 是一个有效的罗马数字，且表示整数在范围 <code>[1, 3999]</code> 内</li>
<li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li>
<li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li>
<li>关于罗马数字的详尽书写规则，可以参考 <a class="link"   href="https://b2b.partcommunity.com/community/knowledge/zh_CN/detail/10753/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97#knowledge_article" >罗马数字 - Mathematics  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</li>
</ul>
<p>Related Topics</p>
<p>哈希表</p>
<p>数学</p>
<p>字符串</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="go-实现一"><a href="#go-实现一" class="headerlink" title="go 实现一"></a>go 实现一</h3><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">romanToInt</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sum <span class="type">int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i &lt; <span class="built_in">len</span>(s); i ++&#123;</span><br><span class="line">        <span class="keyword">if</span> s[i] == <span class="string">&#x27;M&#x27;</span> &#123;</span><br><span class="line">            <span class="comment">// m 为 1000</span></span><br><span class="line">            sum += <span class="number">1000</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> s[i] == <span class="string">&#x27;D&#x27;</span> &#123;</span><br><span class="line">            <span class="comment">// d 为 500</span></span><br><span class="line">            sum += <span class="number">500</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> s[i] == <span class="string">&#x27;C&#x27;</span> &#123;</span><br><span class="line">            <span class="comment">// c 为 100</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(s) <span class="number">-1</span> &amp;&amp; s[i+<span class="number">1</span>] == <span class="string">&#x27;M&#x27;</span> &#123;</span><br><span class="line">                sum += <span class="number">900</span></span><br><span class="line">                i ++</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(s) <span class="number">-1</span> &amp;&amp; s[i+<span class="number">1</span>] == <span class="string">&#x27;D&#x27;</span> &#123;</span><br><span class="line">                sum += <span class="number">400</span></span><br><span class="line">                i ++</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += <span class="number">100</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> s[i] == <span class="string">&#x27;L&#x27;</span> &#123;</span><br><span class="line">            <span class="comment">// l 为 50</span></span><br><span class="line">            sum += <span class="number">50</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> s[i] == <span class="string">&#x27;X&#x27;</span> &#123;</span><br><span class="line">            <span class="comment">// x 为 10</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(s) <span class="number">-1</span> &amp;&amp; s[i+<span class="number">1</span>] == <span class="string">&#x27;C&#x27;</span> &#123;</span><br><span class="line">                sum += <span class="number">90</span></span><br><span class="line">                i ++</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(s) <span class="number">-1</span> &amp;&amp; s[i+<span class="number">1</span>] == <span class="string">&#x27;L&#x27;</span> &#123;</span><br><span class="line">                sum += <span class="number">40</span></span><br><span class="line">                i ++</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += <span class="number">10</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> s[i] == <span class="string">&#x27;V&#x27;</span> &#123;</span><br><span class="line">            <span class="comment">// V 为 5</span></span><br><span class="line">            sum += <span class="number">5</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> s[i] == <span class="string">&#x27;I&#x27;</span> &#123;</span><br><span class="line">            <span class="comment">// I 为 1</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(s)<span class="number">-1</span> &amp;&amp; s[i+<span class="number">1</span>] == <span class="string">&#x27;V&#x27;</span> &#123;</span><br><span class="line">               sum += <span class="number">4</span></span><br><span class="line">               i ++ </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(s)<span class="number">-1</span> &amp;&amp; s[i+<span class="number">1</span>] == <span class="string">&#x27;X&#x27;</span> &#123;</span><br><span class="line">               sum += <span class="number">9</span></span><br><span class="line">               i ++</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="go实现二"><a href="#go实现二" class="headerlink" title="go实现二"></a>go实现二</h3><p><strong>思路</strong></p>
<p>通常情况下，罗马数字中小的数字在大的数字的右边。若输入的字符串满足该情况，那么可以将每个字符视作一个单独的值，累加每个字符对应的数值即可。</p>
<p>例如 XXVII 可视作 X+X+V+I+I&#x3D;10+10+5+1+1&#x3D;27。</p>
<p>若存在小的数字在大的数字的左边的情况，根据规则需要减去小的数字。对于这种情况，我们也可以将每个字符视作一个单独的值，若一个数字右侧的数字比它大，则将该数字的符号取反。</p>
<p>例如 XIV 可视作 X−I+V&#x3D;10−1+5&#x3D;14。</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> symbolValues = <span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>&#123;<span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;D&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;M&#x27;</span>: <span class="number">1000</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">romanToInt</span><span class="params">(s <span class="type">string</span>)</span></span> (ans <span class="type">int</span>) &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> s &#123;</span><br><span class="line">        value := symbolValues[s[i]]</span><br><span class="line">        <span class="keyword">if</span> i &lt; n<span class="number">-1</span> &amp;&amp; value &lt; symbolValues[s[i+<span class="number">1</span>]] &#123;</span><br><span class="line">            ans -= value</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans += value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>2.两数相加【中等】</title>
    <url>/2024/02/08/leetcode/2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0%E3%80%90%E4%B8%AD%E7%AD%89%E3%80%91/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p>
<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>
<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<p>示例 1： <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://localhost:63342/markdownPreview/656424150/fileSchemeResource/5cb4f4750835a1e1d2275e6462aaee79-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0.jpg?_ijt=642k9e1p0barlulpav50s3cr9o"
                      alt="img"
                > 输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4] 输出：[7,0,8] 解释：342 + 465 &#x3D; 807. 示例 2：</p>
<p>输入：l1 &#x3D; [0], l2 &#x3D; [0] 输出：[0] 示例 3：</p>
<p>输入：l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9] 输出：[8,9,9,9,0,0,0,1] 提示：</p>
<p>每个链表中的节点数在范围 [1, 100] 内 0 &lt;&#x3D; Node.val &lt;&#x3D; 9 题目数据保证列表表示的数字不含前导零 Related Topics 递归 链表 数学</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>, val = <span class="number">0</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>, top = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">null</span> &amp;&amp; l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            val = (l1.val + l2.val + carry) % <span class="number">10</span>;</span><br><span class="line">            carry = (l1.val + l2.val + carry) / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">                result = <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">                top = result;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">                result.next = next;</span><br><span class="line">                result = next;</span><br><span class="line">            &#125;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">null</span>) &#123;</span><br><span class="line">            val = (l1.val + carry) % <span class="number">10</span>;</span><br><span class="line">            carry = (l1.val + carry) / <span class="number">10</span>;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">            result.next = node;</span><br><span class="line">            result = node;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            val = (l2.val + carry) % <span class="number">10</span>;</span><br><span class="line">            carry = (l2.val + carry) / <span class="number">10</span>;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">            result.next = node;</span><br><span class="line">            result = node;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(carry);</span><br><span class="line">            result.next = node;</span><br><span class="line">            result = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> top;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>20.有效的括号【简单】</title>
    <url>/2024/02/08/leetcode/20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<ol>
<li>左括号必须用相同类型的右括号闭合。</li>
<li>左括号必须以正确的顺序闭合。</li>
<li>每个右括号都有一个对应的相同类型的左括号。</li>
</ol>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;()&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;(]&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 104</code></li>
<li><code>s</code> 仅由括号 <code>&#39;()[]&#123;&#125;&#39;</code> 组成</li>
</ul>
<p>Related Topics</p>
<p>栈</p>
<p>字符串</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="go实现"><a href="#go实现" class="headerlink" title="go实现"></a>go实现</h3><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">	n := <span class="built_in">len</span>(s)</span><br><span class="line">	<span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	p := <span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">byte</span> &#123;</span><br><span class="line">		<span class="string">&#x27;)&#x27;</span>: <span class="string">&#x27;(&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;]&#x27;</span>: <span class="string">&#x27;[&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;&#125;&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	stack := []<span class="type">byte</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i ++ &#123;</span><br><span class="line">		<span class="comment">// 存在, 说明这个字符是要移除 堆栈 里的数据</span></span><br><span class="line">		<span class="keyword">if</span> p[s[i]] &gt; <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> <span class="built_in">len</span>(stack) == <span class="number">0</span> || stack[<span class="built_in">len</span>(stack) - <span class="number">1</span>] != p[s[i]] &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">			&#125;</span><br><span class="line">			stack = stack[:<span class="built_in">len</span>(stack) - <span class="number">1</span>]</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			stack = <span class="built_in">append</span>(stack, s[i])</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">len</span>(stack) == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>3.无重复字符的最长子串【中等】</title>
    <url>/2024/02/08/leetcode/3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2%E3%80%90%E4%B8%AD%E7%AD%89%E3%80%91/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
<p><strong>示例 1:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3:</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= s.length &lt;= 5 * 104</code></li>
<li><code>s</code> 由英文字母、数字、符号和空格组成</li>
</ul>
<p>Related Topics</p>
<p>哈希表</p>
<p>字符串</p>
<p>滑动窗口</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Set&lt;Character&gt; occ = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();     <span class="comment">// 字符串的长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rk</span> <span class="operator">=</span> <span class="number">0</span>;    <span class="comment">// 右指针的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;    <span class="comment">// 字符串最大的无重复长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                occ.remove(s.charAt(i - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// rk 右指针 &lt; n   &amp;&amp; occ 不含有 s.charAt(rk)</span></span><br><span class="line">            <span class="keyword">while</span> (rk  &lt; n  &amp;&amp; !occ.contains(s.charAt(rk))) &#123;</span><br><span class="line">                occ.add(s.charAt(rk));</span><br><span class="line">                ++rk;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = ans &gt; (rk - i) ? ans : (rk - i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>33.搜索旋转排序数组【中等】</title>
    <url>/2024/02/08/leetcode/33-%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E3%80%90%E4%B8%AD%E7%AD%89%E3%80%91/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>整数数组 nums 按升序排列，数组中的值 互不相同 。</p>
<p>在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;&#x3D; k &lt; nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], …, nums[n-1], nums[0], nums[1], …, nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。</p>
<p>给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。</p>
<p>你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。</p>
<p>示例 1：</p>
<p>输入：nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 0 输出：4 示例 2：</p>
<p>输入：nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 3 输出：-1 示例 3：</p>
<p>输入：nums &#x3D; [1], target &#x3D; 0 输出：-1 提示：</p>
<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 5000 -104 &lt;&#x3D; nums[i] &lt;&#x3D; 104 nums 中的每个值都 独一无二 题目数据保证 nums 在预先未知的某个下标上进行了旋转 -104 &lt;&#x3D; target &lt;&#x3D; 104 Related Topics 数组 二分查找</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java-实现"><a href="#java-实现" class="headerlink" title="java 实现"></a>java 实现</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightIndex</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (leftIndex &lt;= rightIndex) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> (leftIndex + rightIndex) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mod] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mod;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 递增</span></span><br><span class="line">            <span class="keyword">if</span> (nums[<span class="number">0</span>] &lt;= nums[mod]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[<span class="number">0</span>] &lt;= target &amp;&amp; target &lt; nums[mod]) &#123;</span><br><span class="line">                    rightIndex = mod - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    leftIndex = mod + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[mod] &lt; target &amp;&amp; target &lt;= nums[nums.length - <span class="number">1</span>]) &#123;</span><br><span class="line">                    leftIndex = mod + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    rightIndex = mod - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>5.最长回文子串【中等】</title>
    <url>/2024/02/08/leetcode/5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E3%80%90%E4%B8%AD%E7%AD%89%E3%80%91/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p>
<p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;babad&quot;</span><br><span class="line">输出：&quot;bab&quot;</span><br><span class="line">解释：&quot;aba&quot; 同样是符合题意的答案。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;cbbd&quot;</span><br><span class="line">输出：&quot;bb&quot;</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 1000</code></li>
<li><code>s</code> 仅由数字和英文字母组成</li>
</ul>
<p>Related Topics</p>
<p>字符串</p>
<p>动态规划</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span> || s.length() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span>  <span class="operator">=</span> <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i ++) &#123;</span><br><span class="line">            <span class="comment">// 中间值为1个，如：aba</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> expandAroundCenter(s, i, i);</span><br><span class="line">            <span class="comment">// 中间值为2个，如：abba</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> expandAroundCenter(s, i, i + <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> len1 &gt; len2 ? len1 : len2;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (len &gt; end - start) &#123;</span><br><span class="line">                start = i - (len - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                end = i + len / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(start, end + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">                                        </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">expandAroundCenter</span><span class="params">(String s, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> left, R = right;</span><br><span class="line">        <span class="keyword">while</span> (L &gt;=<span class="number">0</span> &amp;&amp; R &lt; s.length() &amp;&amp; s.charAt(L) == s.charAt(R)) &#123;</span><br><span class="line">            L --;</span><br><span class="line">            R ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R - L - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>53.最大子数组和【中等】</title>
    <url>/2024/02/08/leetcode/53-%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C%E3%80%90%E4%B8%AD%E7%AD%89%E3%80%91/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<p>子数组 是数组中的一个连续部分。</p>
<p>示例 1：</p>
<p>输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4] 输出：6 解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。 示例 2：</p>
<p>输入：nums &#x3D; [1] 输出：1 示例 3：</p>
<p>输入：nums &#x3D; [5,4,-1,7,8] 输出：23 提示：</p>
<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 105 -104 &lt;&#x3D; nums[i] &lt;&#x3D; 104 进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。</p>
<p>Related Topics 数组 分治 动态规划</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java-实现"><a href="#java-实现" class="headerlink" title="java 实现"></a>java 实现</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] f = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        f[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; nums.length; j ++) &#123;</span><br><span class="line">            f[j] = Math.max(f[j - <span class="number">1</span>], <span class="number">0</span>) + nums[j];</span><br><span class="line"></span><br><span class="line">            result = Math.max(f[j], result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>7.整数反转【中等】</title>
    <url>/2024/02/08/leetcode/7-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC%E3%80%90%E4%B8%AD%E7%AD%89%E3%80%91/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个 32 位的有符号整数 <code>x</code> ，返回将 <code>x</code> 中的数字部分反转后的结果。</p>
<p>如果反转后整数超过 32 位的有符号整数的范围 <code>[−231, 231 − 1]</code> ，就返回 0。</p>
<p><strong>假设环境不允许存储 64 位整数（有符号或无符号）。</strong></p>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：x = 123</span><br><span class="line">输出：321</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：x = -123</span><br><span class="line">输出：-321</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：x = 120</span><br><span class="line">输出：21</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 4：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：x = 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>-231 &lt;= x &lt;= 231 - 1</code></li>
</ul>
<p>Related Topics</p>
<p>数学</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pop</span> <span class="operator">=</span> x % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (res &gt; Integer.MAX_VALUE / <span class="number">10</span> || (res == Integer.MAX_VALUE / <span class="number">10</span> &amp;&amp; pop &gt; <span class="number">7</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (res &lt; Integer.MIN_VALUE / <span class="number">10</span> || (res == Integer.MIN_VALUE / <span class="number">10</span> &amp;&amp; pop &lt; -<span class="number">8</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res = res * <span class="number">10</span> + pop;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>9.回文数【简单】</title>
    <url>/2024/02/08/leetcode/9-%E5%9B%9E%E6%96%87%E6%95%B0%E3%80%90%E7%AE%80%E5%8D%95%E3%80%91/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<ul>
<li>例如，<code>121</code> 是回文，而 <code>123</code> 不是。</li>
</ul>
<p><strong>示例 1：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：x = 121</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 2：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：x = -121</span><br><span class="line">输出：false</span><br><span class="line">解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure></div>

<p><strong>示例 3：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：x = 10</span><br><span class="line">输出：false</span><br><span class="line">解释：从右向左读, 为 01 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure></div>

<p><strong>提示：</strong></p>
<ul>
<li><code>-231 &lt;= x &lt;= 231 - 1</code></li>
</ul>
<p><strong>进阶：</strong>你能不将整数转为字符串来解决这个问题吗？</p>
<p>Related Topics</p>
<p>数学</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">revertedNumber</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; revertedNumber) &#123;</span><br><span class="line">            revertedNumber = revertedNumber * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x == revertedNumber || x == revertedNumber / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
</search>
