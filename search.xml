<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/02/07/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>动态 Druid 连接池</title>
    <url>/2024/02/07/%E5%8A%A8%E6%80%81-Druid-%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    <content><![CDATA[<h2 id="动态-Druid-连接池"><a href="#动态-Druid-连接池" class="headerlink" title="动态 Druid 连接池"></a>动态 Druid 连接池</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p> <strong>需求</strong>：因项目业务需求，需要在系统上配置不同数据库，然后进行连接获取数据库相关数据； 原生 JDBC 通过 DriverManager 进行连接每次都要重新进行连接，导致整体查询时间效率变低，故引入 Druid 连接池；<br>  但是不同类型数据库生成<code>DruidDataSource</code>后没有将<code>DS(DruidDataSource)</code>进行缓存起来， 本质还是每次连接数据库时还是重新进行数据库连接，问题依然存在。<br>  所以设计了一个<code>容器</code>将<code>DS</code>缓存起来，考虑到容器里数量限制，使用<code>LinkedHashMap</code>进行存储数据，控制存储<code>DS</code>的数量。 另考虑缓存起来的<code>DS</code>存在数据库密码修改的情况，支持更新<code>容器</code>内<code>DS</code>的<code>密码</code>，保证 DS 可用。<br>具体代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接池工具类</span></span><br><span class="line"><span class="comment"> * Created by fengxuguang on 2023/12/28 11:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConnectionPoolUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化大小, 设置为 10</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INITIAL_SIZE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最小线程数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_IDLE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大线程数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ACTIVE</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接等待超时时间, 单位: 毫秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_WAIT</span> <span class="operator">=</span> <span class="number">60_000</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 间隔多久检测一次需要关闭的空闲连接, 单位: 毫秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TIME_BETWEEN_EVICTION_RUNS_MILLIS</span> <span class="operator">=</span> <span class="number">200_000</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重连次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CONNECTION_ERRORS_RETRY_COUNT</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置一个空闲连接在池中最小生存的时间, 单位是毫秒, 设置 5 分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_EVICT_TABLE_IDLE_TIME_MILLIS</span> <span class="operator">=</span> <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接池容器最大数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CONTAINER_MAX_SIZE</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接池容器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;DbSourceKey, DruidDataSource&gt; containers = <span class="keyword">new</span> <span class="title class_">ContainerLinkedHashMap</span>(CONTAINER_MAX_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 DataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> driverName 连接 driver-class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connStr 连接 url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> validateQuery 校验查询语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DruidDataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> DruidDataSource <span class="title function_">getDataSource</span><span class="params">(String driverName, String connStr, String username, String password,</span></span><br><span class="line"><span class="params">                                                String validateQuery)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DbSourceKey</span> <span class="variable">dbSourceKey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DbSourceKey</span>(connStr, username, password);</span><br><span class="line">            <span class="keyword">if</span> (containers.containsKey(dbSourceKey)) &#123;</span><br><span class="line">                <span class="keyword">return</span> getDruidDataSource(dbSourceKey);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            containers.put(dbSourceKey, createDruidDataSource(driverName, connStr, username, password, validateQuery));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> containers.get(dbSourceKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;创建数据源连接池失败：&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 DruidDataSource 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> driverName driver-class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connStr 连接 url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> validateQuery 保持连接SQL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DruidDataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DruidDataSource <span class="title function_">createDruidDataSource</span><span class="params">(String driverName, String connStr, String username, String password,</span></span><br><span class="line"><span class="params">                                           String validateQuery)</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基础连接信息</span></span><br><span class="line">        ds.setDriverClassName(driverName);</span><br><span class="line">        ds.setUrl(connStr);</span><br><span class="line">        ds.setUsername(username);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化大小</span></span><br><span class="line">        ds.setInitialSize(INITIAL_SIZE);</span><br><span class="line">        ds.setMinIdle(MIN_IDLE);</span><br><span class="line">        ds.setMaxActive(MAX_ACTIVE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 连接泄露监测</span></span><br><span class="line">        ds.setRemoveAbandoned(<span class="literal">true</span>);</span><br><span class="line">        ds.setRemoveAbandonedTimeout(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置时间</span></span><br><span class="line">        <span class="comment">// 配置获取连接等待超时的时间</span></span><br><span class="line">        ds.setMaxWait(MAX_WAIT);</span><br><span class="line">        <span class="comment">// 配置间隔多久才进行一次检测, 检测需要关闭的空闲连接, 单位: 毫秒</span></span><br><span class="line">        ds.setTimeBetweenEvictionRunsMillis(TIME_BETWEEN_EVICTION_RUNS_MILLIS);</span><br><span class="line">        <span class="comment">// 设置重连次数</span></span><br><span class="line">        ds.setBreakAfterAcquireFailure(<span class="literal">true</span>);</span><br><span class="line">        ds.setConnectionErrorRetryAttempts(CONNECTION_ERRORS_RETRY_COUNT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 防止过期</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(validateQuery)) &#123;</span><br><span class="line">            validateQuery = <span class="string">&quot;SELECT &#x27;x&#x27;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;-1&quot;</span>.equals(validateQuery)) &#123;</span><br><span class="line">            validateQuery = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ds.setValidationQuery(validateQuery);</span><br><span class="line">        ds.setTestWhileIdle(<span class="literal">true</span>);</span><br><span class="line">        ds.setTestOnBorrow(<span class="literal">true</span>);</span><br><span class="line">        ds.setMinEvictableIdleTimeMillis(MIN_EVICT_TABLE_IDLE_TIME_MILLIS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 dbSourceKey 获取 DruidDataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dbSourceKey dbSourceKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DruidDataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DruidDataSource <span class="title function_">getDruidDataSource</span><span class="params">(DbSourceKey dbSourceKey)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!containers.containsKey(dbSourceKey)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// verify whether the password is changed. if the password is changed, update the password in the DruidDataSource</span></span><br><span class="line">        <span class="keyword">if</span> (!dbSourceKey.getPassword().equals(containers.get(dbSourceKey).getPassword())) &#123;</span><br><span class="line">            containers.get(dbSourceKey).setPassword(dbSourceKey.getPassword());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> containers.get(dbSourceKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 容器链表, 用于存储 DruidDataSource, key: DbSourceKey, value: DruidDataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ContainerLinkedHashMap</span> <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;DbSourceKey, DruidDataSource&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 链接最大容量</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> maxSize;</span><br><span class="line"></span><br><span class="line">        ContainerLinkedHashMap(<span class="type">int</span> maxSize) &#123;</span><br><span class="line">            <span class="keyword">if</span> (maxSize &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.maxSize = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> DruidDataSource <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.get(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;DbSourceKey, DruidDataSource&gt; eldest)</span> &#123;</span><br><span class="line">            <span class="comment">// 超过最大容量, 需要移除旧的数据</span></span><br><span class="line">            <span class="keyword">if</span> (containers.size() &gt; maxSize) &#123;</span><br><span class="line">                <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> eldest.getValue();</span><br><span class="line">                druidDataSource.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> containers.size() &gt; maxSize;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储数据源信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DbSourceKey</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 连接 url, 设置后不可修改</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String connStr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 账号, 设置后不可修改</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String account;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 密码, 设置后密码可修改</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Setter</span></span><br><span class="line">        <span class="meta">@Getter</span></span><br><span class="line">        <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">        DbSourceKey(String connStr, String account, String password) &#123;</span><br><span class="line">            <span class="built_in">this</span>.connStr = connStr;</span><br><span class="line">            <span class="built_in">this</span>.account = account;</span><br><span class="line">            <span class="built_in">this</span>.password = password;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">DbSourceKey</span> <span class="variable">that</span> <span class="operator">=</span> (DbSourceKey) o;</span><br><span class="line">            <span class="keyword">return</span> Objects.equals(connStr, that.connStr) &amp;&amp; Objects.equals(account, that.account);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hash(connStr, account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h3><ol>
<li><code>ContainerLinkedHashMap</code>继承<code>LinkedHashMap</code>后重写<code>removeEldestEntry</code>方法的原因。</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedHashMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">HashMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div>

<p>解释：由于<code>LinkedHashMap</code>继承<code>HashMap</code>，<code>LinkedHashMap</code>在调用<code>put</code>方法时，实际是调用<code>HashMap</code>的<code>put</code>方法，<code>HashMap</code>的<code>put</code>方法源码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">afterNodeInsertion</span><span class="params">(<span class="type">boolean</span> evict)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>看源码可知，调用<code>put</code>方法后接着去调用<code>putVal</code>方法，在将数据插入到<code>HashMap</code>后，会调用<code>afterNodeInsertion</code>方法，默认<code>HashMap</code>对此方法不做处理。但是<code>LinkedHashMap</code>对<code>afterNodeInsertion</code>此方法进行了处理，源码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedHashMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">HashMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">afterNodeInsertion</span><span class="params">(<span class="type">boolean</span> evict)</span> &#123; <span class="comment">// possibly remove eldest</span></span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; first;</span><br><span class="line">        <span class="keyword">if</span> (evict &amp;&amp; (first = head) != <span class="literal">null</span> &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> first.key;</span><br><span class="line">            removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在<code>afterNodeInsertion</code>方法内会调用<code>removeEldestEntry</code>方法来判断是否删除链表头数据，默认<code>LinkedHashMap</code>的<code>removeEldestEntry</code>返回<code>false</code>，表示不移除链表头元素。</p>
<p><code>ContainerLinkedHashMap</code>继承<code>LinkedHashMap</code>后，可以对<code>removeEldestEntry</code>方法进行重新，根据链表内的容量来判断是否需要删除链表头元素，以达到控制链表容量的目的。</p>
<p>ps：<code>removeEldestEntry</code>方法在<code>LinkedHashMap</code>调用时传入的参数为链表的头元素。</p>
<p>源码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ContainerLinkedHashMap</span> <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;DbSourceKey, DruidDataSource&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链接最大容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> maxSize;</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;DbSourceKey, DruidDataSource&gt; eldest)</span> &#123;</span><br><span class="line">        <span class="comment">// 超过最大容量, 需要移除旧的数据</span></span><br><span class="line">        <span class="keyword">if</span> (containers.size() &gt; maxSize) &#123;</span><br><span class="line">            <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> eldest.getValue();</span><br><span class="line">            druidDataSource.close();</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> containers.size() &gt; maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
  </entry>
</search>
